import logging
import os
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from outline_api import Manager
import time
from db import init_db, add_key, clear_key, has_used_trial, get_active_key

TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

OUTLINE_API_URL = os.getenv("OUTLINE_API_URL")

DELETE_DELAY = int(os.getenv("DELETE_DELAY", "30"))


async def send_temporary(bot: Bot, chat_id: int, text: str, delay: int = DELETE_DELAY, **kwargs) -> types.Message:
    msg = await bot.send_message(chat_id, text, **kwargs)

    async def _remove() -> None:
        await asyncio.sleep(delay)
        try:
            await bot.delete_message(chat_id, msg.message_id)
        except Exception as exc:
            logging.error("Failed to delete message: %s", exc)

    asyncio.create_task(_remove())
    return msg


class BuyVPN(StatesGroup):
    waiting_tariff = State()
    waiting_method = State()


TARIFFS = {
    "\U0001F7E1 1 –º–µ—Å ‚Äî 200\u20BD": {"amount": 200, "code": "1m", "days": 30},
    "\U0001F7E2 3 –º–µ—Å ‚Äî 550\u20BD": {"amount": 550, "code": "3m", "days": 90},
    "\U0001F7E2 6 –º–µ—Å ‚Äî 1000\u20BD": {"amount": 1000, "code": "6m", "days": 180},
    "\U0001F7E3 12 –º–µ—Å ‚Äî 1900\u20BD": {"amount": 1900, "code": "12m", "days": 365},
}

PAY_METHODS = {
    "\U0001F4B0 –°–ë–ü": ("sbp", "–°–ë–ü"),
    "\U0001F4B3 –ö–∞—Ä—Ç–∞ –†–§": ("card", "–ö–∞—Ä—Ç–∞ –†–§"),
    "\U0001F3E6 –Æ.–ö–∞—Å—Å–∞": ("yookassa", "–Æ.–ö–∞—Å—Å–∞"),
}


def outline_manager() -> Manager:
    if not OUTLINE_API_URL:
        raise RuntimeError("OUTLINE_API_URL not configured")
    return Manager(apiurl=OUTLINE_API_URL, apicrt="")


async def create_outline_key(label: str | None = None) -> dict:
    manager = outline_manager()
    return await asyncio.to_thread(manager.new, label)


async def schedule_key_deletion(
    key_id: int,
    delay: int = 24 * 60 * 60,
    user_id: int | None = None,
    is_trial: bool | None = None,
) -> None:
    async def _remove() -> None:
        await asyncio.sleep(delay)
        manager = outline_manager()
        try:
            await asyncio.to_thread(manager.delete, key_id)
        except Exception as exc:
            logging.error("Failed to delete Outline key: %s", exc)
        if user_id is not None and is_trial is not None:
            clear_key(user_id, is_trial)

    asyncio.create_task(_remove())


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "\U0001F44B –ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äî –ú–∏—Ä–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã, –∏ –¥–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π VPN, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ –Ω–∞–¥—ë–∂–Ω–æ, "
        "–∫–∞–∫ —Ö–æ—Ä–æ—à–∞—è —à—É—Ç–∫–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º \U0001F60F\n\n"
        "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –ú–∏—Ä–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã?\n\n"
        "\u2705 –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ‚Äî –≤–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç\n"
        "\U0001F680 –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±–∏—Ç/—Å–µ–∫ ‚Äî –ª–µ—Ç–∞–µ—Ç, –∫–∞–∫ —Å–º–µ—Ö –≤ —Ö–æ—Ä–æ—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "\U0001F4F5 –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –≤—ã–ª–µ—Ç–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç\n"
        "\U0001F4CA –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —Ö–æ—Ç—å —Å—É—Ç–∫–∏ –Ω–∞–ø—Ä–æ–ª—ë—Ç\n"
        "\U0001F6E1 100% –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—Å—ë –ø–æ-–≤–∑—Ä–æ—Å–ª–æ–º—É, —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "\U0001F4F1 –ü–æ–¥–¥–µ—Ä–∂–∫–∞: iOS, Android, Windows, MacOS, Android TV\n\n"
        "–ú–∏—Ä–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ –≤–µ—Å—ë–ª–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ,\n"
        "–∞ –µ—â—ë –∏ –ø—Ä–æ —Å–≤–æ–±–æ–¥—É –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ \U0001F680"
    )

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="\U0001F511 –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")],
        [InlineKeyboardButton(text="\U0001F6D2 –ö—É–ø–∏—Ç—å VPN | \U0001F4C5 –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="buy_extend")]
    ])

    reply_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="\U0001F6D2 –ö—É–ø–∏—Ç—å VPN | \U0001F4C5 –ü—Ä–æ–¥–ª–∏—Ç—å"),
             KeyboardButton(text="\U0001F511 –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")],
            [KeyboardButton(text="\U0001F9D1\u200D\U0001F4AC –û—Ç–∑—ã–≤—ã"),
             KeyboardButton(text="\U0001F381 –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")],
            [KeyboardButton(text="\U0001F198 –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=inline_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)


@dp.callback_query(F.data == "trial")
async def callback_trial(callback: types.CallbackQuery):
    if has_used_trial(callback.from_user.id):
        await send_temporary(bot, callback.message.chat.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        try:
            key = await create_outline_key(label=f"vpn_{callback.from_user.id}")
            expires = int(time.time() + 24 * 60 * 60)
            add_key(callback.from_user.id, key.get("id"), key.get("accessUrl"), expires, True)
            await schedule_key_deletion(key.get("id"), delay=24 * 60 * 60, user_id=callback.from_user.id, is_trial=True)
            await callback.message.answer(
                f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 24 —á–∞—Å–∞:\n{key.get('accessUrl', '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å')}"
            )
        except Exception as exc:
            logging.error("Failed to create trial key: %s", exc)
            await send_temporary(bot, callback.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á.")
    await callback.answer()


@dp.callback_query(F.data == "buy_extend")
async def callback_buy(callback: types.CallbackQuery):
    await send_temporary(bot, callback.message.chat.id, '–í—ã –Ω–∞–∂–∞–ª–∏ "–ö—É–ø–∏—Ç—å VPN | –ü—Ä–æ–¥–ª–∏—Ç—å"')
    await callback.answer()


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await cmd_start(message)


@dp.message(Command("buy"))
async def cmd_buy(message: types.Message):
    await menu_buy(message)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await menu_help(message)


@dp.message(F.text == "\U0001F6D2 –ö—É–ø–∏—Ç—å VPN | \U0001F4C5 –ü—Ä–æ–¥–ª–∏—Ç—å")
async def menu_buy(message: types.Message, state: FSMContext):
    text = (
        "\U0001F525 –û—Ñ–æ—Ä–º–ª—è—è –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Premium VPN –æ—Ç –ú–∏—Ä–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã ‚Äî –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: \uD83D\uDC47\n\n"
        "‚îî üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ  \n"
        "‚îî üë• –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —á–∞—Ç–µ ‚Äî @andekdot_support  \n"
        "‚îî üñ• –î–æ—Å—Ç—É–ø —Å –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî iOS, Android, Windows, MacOS, Android TV  \n"
        "‚îî üîë –û–¥–∏–Ω –∫–ª—é—á ‚Äî –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–≤—Å—ë –ø—Ä–æ–∑—Ä–∞—á–Ω–æ)  \n"
        "‚îî üõ† –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –≤–∏–¥–µ–æ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ VPN –∑–∞ 2 –º–∏–Ω—É—Ç—ã  \n"
        "‚îî ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π  \n"
        "‚îî üîï –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã ‚Äî –Ω–∏—á—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç  \n"
        "‚îî ‚õîÔ∏è –ë–µ–∑ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–π ‚Äî –≤—Å—ë –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º\n\n"
        "üé• –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?  \n"
        "üëâ –°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ: —Ç—ã–∫ —Å—é–¥–∞\n\n"
        "üí° –°–æ–≤–µ—Ç: —á–µ–º –¥–æ–ª—å—à–µ —Å—Ä–æ–∫, —Ç–µ–º –Ω–∏–∂–µ —Ü–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü üòâ  \n"
        "‚ñ∂Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"
    )

    tariff_kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="\U0001F7E1 1 –º–µ—Å ‚Äî 200\u20BD"),
                KeyboardButton(text="\U0001F7E2 3 –º–µ—Å ‚Äî 550\u20BD"),
                KeyboardButton(text="\U0001F7E2 6 –º–µ—Å ‚Äî 1000\u20BD"),
            ],
            [KeyboardButton(text="\U0001F7E3 12 –º–µ—Å ‚Äî 1900\u20BD")],
            [KeyboardButton(text="\U0001F4A0 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
    )

    await message.answer(text, reply_markup=tariff_kb)
    await state.set_state(BuyVPN.waiting_tariff)


@dp.message(BuyVPN.waiting_tariff, F.text.in_(TARIFFS.keys()))
async def select_tariff(message: types.Message, state: FSMContext):
    await state.update_data(tariff=message.text)
    pay_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="\U0001F4B0 –°–ë–ü")],
            [KeyboardButton(text="\U0001F4B3 –ö–∞—Ä—Ç–∞ –†–§")],
            [KeyboardButton(text="\U0001F3E6 –Æ.–ö–∞—Å—Å–∞")],
        ],
        resize_keyboard=True,
    )
    await state.set_state(BuyVPN.waiting_method)
    await message.answer("\U0001F4AC –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=pay_kb)


@dp.message(BuyVPN.waiting_tariff, F.text == "\U0001F4A0 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def tariff_back_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await cmd_start(message)


@dp.message(BuyVPN.waiting_method, F.text.in_(PAY_METHODS.keys()))
async def select_method(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff_button = data.get("tariff")
    tariff = TARIFFS.get(tariff_button)
    method_code, method_name = PAY_METHODS[message.text]
    url = f"https://–≤–∞—à-–¥–æ–º–µ–Ω.—Ä—É/pay?tariff={tariff['code']}&method={method_code}"
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ {method_name}.\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n{url}\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @andekdot_support"
    )

    pay_url = f"https://–≤–∞—à-—Å–∞–π—Ç.—Ä—É/pay?amount={tariff['amount']}&method={method_code}"
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"\U0001F3E6 –û–ø–ª–∞—Ç–∏—Ç—å {tariff['amount']} \u20BD", url=pay_url)]
        ]
    )
    await message.answer(
        "\u2611\uFE0F –°–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: ¬´\U0001F3E6 –û–ø–ª–∞—Ç–∏—Ç—å¬ª",
        reply_markup=inline_kb,
    )

    try:
        key = await create_outline_key(label=f"vpn_{message.from_user.id}")
        duration = tariff.get("days", 30) * 24 * 60 * 60
        expires = int(time.time() + duration)
        add_key(message.from_user.id, key.get("id"), key.get("accessUrl"), expires, False)
        await schedule_key_deletion(
            key.get("id"), delay=duration, user_id=message.from_user.id, is_trial=False
        )
        await message.answer(f"–í–∞—à –∫–ª—é—á:\n{key.get('accessUrl', '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å')}")
    except Exception as exc:
        logging.error("Failed to create paid key: %s", exc)
        await send_temporary(bot, message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á.")
    await state.clear()


@dp.message(F.text == "\U0001F511 –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
async def menu_keys(message: types.Message):
    row = get_active_key(message.from_user.id)
    now_ts = int(time.time())
    if row:
        access_url, expires_at, is_trial = row
        if expires_at is not None and expires_at <= now_ts:
            clear_key(message.from_user.id, bool(is_trial))
            text = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫."
        else:
            text = f"–í–∞—à Outline –∫–ª—é—á:\n{access_url}"
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞."
    await send_temporary(bot, message.chat.id, text)


@dp.message(F.text == "\U0001F9D1\u200D\U0001F4AC –û—Ç–∑—ã–≤—ã")
async def menu_reviews(message: types.Message):
    await send_temporary(bot, message.chat.id, '–†–∞–∑–¥–µ–ª "–û—Ç–∑—ã–≤—ã" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@dp.message(F.text == "\U0001F381 –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")
async def menu_invite(message: types.Message):
    await send_temporary(bot, message.chat.id, '–†–∞–∑–¥–µ–ª "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@dp.message(F.text == "\U0001F198 –ü–æ–º–æ—â—å")
async def menu_help(message: types.Message):
    await send_temporary(bot, message.chat.id, '–†–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


async def main() -> None:
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
